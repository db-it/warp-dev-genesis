# code: language=ansible

# ########## managed host preparation ########## #
# copy ssh public key
# ssh-copy-id -i ~/.ssh/id_rsa.pub user@host

# ########## Usage ########## #
# use argument '--ask-become-pass'or '-e "ansible_become_password=p@$$w0rd"' or use Ansible vault,
# because the following roles require priviliged access:
# role: fish-shell                  - requires priviliged permissions to change default shell
# role: backup-and-restore-paths    - eventually requires priviliged permissions when copying files to root
# role: homebrew                    - requires priviliged permissions for creating homebrew directories or installing Casks
#
# Role homebrew requires additional argument -e "@secrets.yml", because a sudo password is required for installing some Homebrew Casks.
#
#
# DO A COMPLETE WARP:
# run macos play on local target:   ansible-playbook -i inventory.ini macos.yml --become-password-file=sudo_pass.txt -e "@secrets.yml"
# run macos play on remote target:  ansible-playbook -i remote.ini macos.yml --become-password-file=sudo_pass.txt -e "@secrets.yml"
#
# RUN SINGLE WARP STEPS (remote):
# backup-and-restore-paths        ansible-playbook -i remote.ini macos.yml --tags backup-and-restore-paths -e backup_and_restore_paths_backup_path=/Volumes/SanDisk/macos_backup
# homebrew                        ansible-playbook -i remote.ini macos.yml --tags homebrew -e "@secrets.yml"
# fish shell                      ansible-playbook -i remote.ini macos.yml --tags fish
# dotfiles                        ansible-playbook -i remote.ini macos.yml --tags dotfiles
# secretfiles                     ansible-playbook -i remote.ini macos.yml --tags secretfiles
# syncfiles                       ansible-playbook -i remote.ini macos.yml --tags syncfiles
# dock                            ansible-playbook -i remote.ini macos.yml --tags dock -e "@secrets.yml"
# mas                             ansible-playbook -i remote.ini macos.yml --tags mas
# vscode                          ansible-playbook -i remote.ini macos.yml --tags vscode
# intellij                        ansible-playbook -i remote.ini macos.yml --tags intellij
# fnm                             ansible-playbook -i remote.ini macos.yml --tags fnm
# fonts                           ansible-playbook -i remote.ini macos.yml --tags fonts
# macos                           ansible-playbook -i remote.ini macos.yml --tags macos
# extra-packages                  ansible-playbook -i remote.ini macos.yml --tags extra-packages
#
# POST TASKS:
# set fish as default shell:      ansible-playbook -i remote.ini macos.yml --tags fish -e fish_set_default_shell=true
#
---
- name: Configure host
  hosts: "{{ override_host | default('macs') }}"

  vars_files:
    - default.config.yml
  vars:
    do_sync_files: yes
    target_user:
      username: "{{ ansible_user_id }}"
      user_dir: "{{ ansible_user_dir }}"

  environment:
    # extending PATH is required for remote targets by some roles: vscode
    PATH: /usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}

  pre_tasks:
    - name: Include playbook configuration
      ansible.builtin.include_vars: "{{ item }}"
      with_fileglob:
        - "{{ playbook_dir }}/config.yml"
      tags: ['always']

    - debug: var=target_user
      tags: ['always']
    - name: Print all playbook vars
      ansible.builtin.debug: var=vars
      tags: ['never', 'debug']
    - name: Print ansible facts
      ansible.builtin.debug: var=ansible_facts
      tags: ['never', 'facts']
    - name: Print ansible.env
      debug: var=ansible_env
      tags: ['never', 'env']

    - name: Run pre-provision task files in a block
      tags: ['pre']
      block:
      - name: Run configured pre-provision ansible task files
        ansible.builtin.include_tasks: "{{ outer_item }}"
        loop_control:
          loop_var: outer_item
        with_fileglob: "{{ pre_provision_tasks | default(omit) }}"
    - name: Import tasks rosetta2
      ansible.builtin.import_tasks: tasks/rosetta2.yml
      when:
        - install_rosetta2
        - ansible_facts['os_family'] == 'Darwin'
        - ansible_facts['architecture'] == 'arm64'
      tags: ['rosetta2']

  roles:
    # - role: backup-and-restore-paths
    #   when: backup_and_restore_paths_do_restore
    #   tags: ['backup-and-restore-paths']
    - role: elliotweiser.osx-command-line-tools
    - role: geerlingguy.mac.homebrew
      tags: ['homebrew']
    - role: fish-shell
      when: configure_fish
      tags: ['fish']
    - role: geerlingguy.dotfiles
      when: configure_dotfiles
      tags: ['dotfiles']
    - role: sync-files
      when: do_sync_files
      tags: ['syncfiles']
    - role: secret-files
      when: configure_secretfiles
      tags: ['secretfiles']
    - role: dock
      when: configure_dock
      tags: ['dock']
    - role: geerlingguy.mac.mas
      when: mas_installed_apps or mas_installed_app_ids
      tags: ['mas']
    - role: intellij-idea
      when: configure_intellij
      tags: ['intellij']
    - role: visual-studio-code
      when: configure_vscode
      tags: ['vscode']
    - role: fast-node-manager
      when: configure_fnm
      tags: ['fnm']

  tasks:
    - name: Import tasks sudoers
      ansible.builtin.import_tasks: tasks/sudoers.yml
      when: configure_sudoers
      tags: ['sudoers']

    - name: Import tasks fonts
      ansible.builtin.import_tasks: tasks/fonts.yml
      when: configure_fonts
      tags: ['fonts']

    - name: Import tasks macos
      ansible.builtin.import_tasks: tasks/macos.yml
      when: configure_macos
      tags: ['macos']

    - name: Import tasks extra-packages
      ansible.builtin.import_tasks: tasks/extra-packages.yml
      tags: ['extra-packages']

    - name: Run post-provision task files in a block
      tags: ['post']
      block:
        - name: Run configured post-provision ansible task files.
          ansible.builtin.include_tasks: "{{ outer_item }}"
          loop_control:
            loop_var: outer_item
          with_fileglob: "{{ post_provision_tasks | default(omit) }}"
